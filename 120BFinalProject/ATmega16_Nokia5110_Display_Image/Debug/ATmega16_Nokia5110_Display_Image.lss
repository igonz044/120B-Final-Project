
ATmega16_Nokia5110_Display_Image.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001f94  00800100  0000054c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00802094  00802094  00002574  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9e  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5b  00000000  00000000  00004422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f39  00000000  00000000  00004f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000979  00000000  00000000  00006300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100f  00000000  00000000  00006c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007c88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	10 e2       	ldi	r17, 0x20	; 32
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 39       	cpi	r26, 0x94	; 148
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	20 e2       	ldi	r18, 0x20	; 32
  b4:	a4 e9       	ldi	r26, 0x94	; 148
  b6:	b0 e2       	ldi	r27, 0x20	; 32
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3d       	cpi	r26, 0xD2	; 210
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d1       	rcall	.+792    	; 0x3dc <main>
  c4:	41 c2       	rjmp	.+1154   	; 0x548 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <PlayerTick>:
	{
		SPI_Write(image_data[k]);
	}
	PORTB &= ~(1<<DC);
	SPI_SS_Disable();
}
  c8:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <OS_State>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	a9 f0       	breq	.+42     	; 0xfa <PlayerTick+0x32>
  d0:	28 f4       	brcc	.+10     	; 0xdc <PlayerTick+0x14>
  d2:	88 23       	and	r24, r24
  d4:	41 f0       	breq	.+16     	; 0xe6 <PlayerTick+0x1e>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	51 f0       	breq	.+20     	; 0xee <PlayerTick+0x26>
  da:	1b c0       	rjmp	.+54     	; 0x112 <PlayerTick+0x4a>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	99 f0       	breq	.+38     	; 0x106 <PlayerTick+0x3e>
  e0:	86 30       	cpi	r24, 0x06	; 6
  e2:	d0 f0       	brcs	.+52     	; 0x118 <PlayerTick+0x50>
  e4:	16 c0       	rjmp	.+44     	; 0x112 <PlayerTick+0x4a>
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <PlayerPosition>
  ec:	15 c0       	rjmp	.+42     	; 0x118 <PlayerTick+0x50>
  ee:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <PlayerPosition>
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <PlayerPosition>
  f8:	0f c0       	rjmp	.+30     	; 0x118 <PlayerTick+0x50>
  fa:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <PlayerPosition>
  fe:	90 5f       	subi	r25, 0xF0	; 240
 100:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <PlayerPosition>
 104:	09 c0       	rjmp	.+18     	; 0x118 <PlayerTick+0x50>
 106:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <PlayerPosition>
 10a:	90 51       	subi	r25, 0x10	; 16
 10c:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <PlayerPosition>
 110:	03 c0       	rjmp	.+6      	; 0x118 <PlayerTick+0x50>
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <PlayerPosition>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret

0000011c <DisplayTick>:
 11c:	08 95       	ret

0000011e <TimerSet>:
 11e:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <_avr_timer_M>
 122:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <_avr_timer_M+0x1>
 126:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <_avr_timer_M+0x2>
 12a:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <_avr_timer_M+0x3>
 12e:	60 93 c0 20 	sts	0x20C0, r22	; 0x8020c0 <_avr_timer_cntcurr>
 132:	70 93 c1 20 	sts	0x20C1, r23	; 0x8020c1 <_avr_timer_cntcurr+0x1>
 136:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <_avr_timer_cntcurr+0x2>
 13a:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <_avr_timer_cntcurr+0x3>
 13e:	08 95       	ret

00000140 <TimerOn>:
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 146:	8d e7       	ldi	r24, 0x7D	; 125
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 160:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <_avr_timer_M>
 164:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <_avr_timer_M+0x1>
 168:	a0 91 8a 20 	lds	r26, 0x208A	; 0x80208a <_avr_timer_M+0x2>
 16c:	b0 91 8b 20 	lds	r27, 0x208B	; 0x80208b <_avr_timer_M+0x3>
 170:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <_avr_timer_cntcurr>
 174:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <_avr_timer_cntcurr+0x1>
 178:	a0 93 c2 20 	sts	0x20C2, r26	; 0x8020c2 <_avr_timer_cntcurr+0x2>
 17c:	b0 93 c3 20 	sts	0x20C3, r27	; 0x8020c3 <_avr_timer_cntcurr+0x3>
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
 186:	08 95       	ret

00000188 <__vector_13>:
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <_avr_timer_cntcurr>
 19e:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <_avr_timer_cntcurr+0x1>
 1a2:	a0 91 c2 20 	lds	r26, 0x20C2	; 0x8020c2 <_avr_timer_cntcurr+0x2>
 1a6:	b0 91 c3 20 	lds	r27, 0x20C3	; 0x8020c3 <_avr_timer_cntcurr+0x3>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <_avr_timer_cntcurr>
 1b4:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 c2 20 	sts	0x20C2, r26	; 0x8020c2 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 c3 20 	sts	0x20C3, r27	; 0x8020c3 <_avr_timer_cntcurr+0x3>
 1c0:	89 2b       	or	r24, r25
 1c2:	8a 2b       	or	r24, r26
 1c4:	8b 2b       	or	r24, r27
 1c6:	99 f4       	brne	.+38     	; 0x1ee <__vector_13+0x66>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <TimerFlag>
 1ce:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <_avr_timer_M>
 1d2:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <_avr_timer_M+0x1>
 1d6:	a0 91 8a 20 	lds	r26, 0x208A	; 0x80208a <_avr_timer_M+0x2>
 1da:	b0 91 8b 20 	lds	r27, 0x208B	; 0x80208b <_avr_timer_M+0x3>
 1de:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <_avr_timer_cntcurr>
 1e2:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <_avr_timer_cntcurr+0x1>
 1e6:	a0 93 c2 20 	sts	0x20C2, r26	; 0x8020c2 <_avr_timer_cntcurr+0x2>
 1ea:	b0 93 c3 20 	sts	0x20C3, r27	; 0x8020c3 <_avr_timer_cntcurr+0x3>
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <N5110_Cmnd>:
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
 204:	29 98       	cbi	0x05, 1	; 5
 206:	8f d1       	rcall	.+798    	; 0x526 <SPI_SS_Enable>
 208:	8c 2f       	mov	r24, r28
 20a:	99 d1       	rcall	.+818    	; 0x53e <SPI_Write>
 20c:	29 9a       	sbi	0x05, 1	; 5
 20e:	8d d1       	rcall	.+794    	; 0x52a <SPI_SS_Disable>
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <N5110_Reset>:
 214:	28 98       	cbi	0x05, 0	; 5
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <N5110_Reset+0x8>
 224:	00 c0       	rjmp	.+0      	; 0x226 <N5110_Reset+0x12>
 226:	00 00       	nop
 228:	28 9a       	sbi	0x05, 0	; 5
 22a:	08 95       	ret

0000022c <N5110_init>:
 22c:	f3 df       	rcall	.-26     	; 0x214 <N5110_Reset>
 22e:	81 e2       	ldi	r24, 0x21	; 33
 230:	e7 df       	rcall	.-50     	; 0x200 <N5110_Cmnd>
 232:	80 ec       	ldi	r24, 0xC0	; 192
 234:	e5 df       	rcall	.-54     	; 0x200 <N5110_Cmnd>
 236:	87 e0       	ldi	r24, 0x07	; 7
 238:	e3 df       	rcall	.-58     	; 0x200 <N5110_Cmnd>
 23a:	83 e1       	ldi	r24, 0x13	; 19
 23c:	e1 df       	rcall	.-62     	; 0x200 <N5110_Cmnd>
 23e:	80 e2       	ldi	r24, 0x20	; 32
 240:	df df       	rcall	.-66     	; 0x200 <N5110_Cmnd>
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	dd cf       	rjmp	.-70     	; 0x200 <N5110_Cmnd>
 246:	08 95       	ret

00000248 <lcd_setXY>:
 248:	cf 93       	push	r28
 24a:	c6 2f       	mov	r28, r22
 24c:	d9 df       	rcall	.-78     	; 0x200 <N5110_Cmnd>
 24e:	8c 2f       	mov	r24, r28
 250:	d7 df       	rcall	.-82     	; 0x200 <N5110_Cmnd>
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <N5110_clear>:
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	65 d1       	rcall	.+714    	; 0x526 <SPI_SS_Enable>
 25c:	29 9a       	sbi	0x05, 1	; 5
 25e:	c8 ef       	ldi	r28, 0xF8	; 248
 260:	d1 e0       	ldi	r29, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	6c d1       	rcall	.+728    	; 0x53e <SPI_Write>
 266:	21 97       	sbiw	r28, 0x01	; 1
 268:	e1 f7       	brne	.-8      	; 0x262 <N5110_clear+0xc>
 26a:	29 98       	cbi	0x05, 1	; 5
 26c:	5e d1       	rcall	.+700    	; 0x52a <SPI_SS_Disable>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <babyMode>:
	.x=32,
	.y=0
};

void babyMode(){
	speed = 5;
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <speed+0x1>
 27c:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <speed>
	barStart = 9;
 280:	89 e0       	ldi	r24, 0x09	; 9
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <barStart+0x1>
 288:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <barStart>
	barStop = 3;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <barStop+0x1>
 294:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <barStop>
	for(int i = 0; i < width; i++){
 298:	20 91 86 20 	lds	r18, 0x2086	; 0x802086 <width>
 29c:	30 91 87 20 	lds	r19, 0x2087	; 0x802087 <width+0x1>
 2a0:	12 16       	cp	r1, r18
 2a2:	13 06       	cpc	r1, r19
 2a4:	8c f4       	brge	.+34     	; 0x2c8 <babyMode+0x54>
 2a6:	e8 ee       	ldi	r30, 0xE8	; 232
 2a8:	f6 e0       	ldi	r31, 0x06	; 6
 2aa:	a8 ef       	ldi	r26, 0xF8	; 248
 2ac:	b2 e0       	ldi	r27, 0x02	; 2
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	28 51       	subi	r18, 0x18	; 24
 2b4:	39 4f       	sbci	r19, 0xF9	; 249
		grid[barStart][i] = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	81 93       	st	Z+, r24
 2bc:	91 93       	st	Z+, r25
		grid[barStop][i] = 1;
 2be:	8d 93       	st	X+, r24
 2c0:	9d 93       	st	X+, r25

void babyMode(){
	speed = 5;
	barStart = 9;
	barStop = 3;
	for(int i = 0; i < width; i++){
 2c2:	e2 17       	cp	r30, r18
 2c4:	f3 07       	cpc	r31, r19
 2c6:	c9 f7       	brne	.-14     	; 0x2ba <babyMode+0x46>
 2c8:	08 95       	ret

000002ca <studentMode>:
		grid[barStart][i] = 1;
		grid[barStop][i] = 1;
	}
}
void studentMode(){
	speed = 3;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <speed+0x1>
 2d2:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <speed>
	barStart = 8;
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <barStart+0x1>
 2de:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <barStart>
	barStop = 4;
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <barStop+0x1>
 2ea:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <barStop>
	for(int i = 0; i < width; i++){
 2ee:	20 91 86 20 	lds	r18, 0x2086	; 0x802086 <width>
 2f2:	30 91 87 20 	lds	r19, 0x2087	; 0x802087 <width+0x1>
 2f6:	12 16       	cp	r1, r18
 2f8:	13 06       	cpc	r1, r19
 2fa:	8c f4       	brge	.+34     	; 0x31e <studentMode+0x54>
 2fc:	e0 e4       	ldi	r30, 0x40	; 64
 2fe:	f6 e0       	ldi	r31, 0x06	; 6
 300:	a0 ea       	ldi	r26, 0xA0	; 160
 302:	b3 e0       	ldi	r27, 0x03	; 3
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	20 5c       	subi	r18, 0xC0	; 192
 30a:	39 4f       	sbci	r19, 0xF9	; 249
		grid[barStart][i] = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	81 93       	st	Z+, r24
 312:	91 93       	st	Z+, r25
		grid[barStop][i] = 1;
 314:	8d 93       	st	X+, r24
 316:	9d 93       	st	X+, r25
}
void studentMode(){
	speed = 3;
	barStart = 8;
	barStop = 4;
	for(int i = 0; i < width; i++){
 318:	e2 17       	cp	r30, r18
 31a:	f3 07       	cpc	r31, r19
 31c:	c9 f7       	brne	.-14     	; 0x310 <studentMode+0x46>
 31e:	08 95       	ret

00000320 <JeffMode>:
		grid[barStart][i] = 1;
		grid[barStop][i] = 1;
	}
}
void JeffMode(){
	speed = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 85 20 	sts	0x2085, r25	; 0x802085 <speed+0x1>
 328:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <speed>
	barStart = 7;
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <barStart+0x1>
 334:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <barStart>
	barStop = 5;
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 81 20 	sts	0x2081, r25	; 0x802081 <barStop+0x1>
 340:	80 93 80 20 	sts	0x2080, r24	; 0x802080 <barStop>
	for(int i = 0; i < width; i++){
 344:	20 91 86 20 	lds	r18, 0x2086	; 0x802086 <width>
 348:	30 91 87 20 	lds	r19, 0x2087	; 0x802087 <width+0x1>
 34c:	12 16       	cp	r1, r18
 34e:	13 06       	cpc	r1, r19
 350:	8c f4       	brge	.+34     	; 0x374 <JeffMode+0x54>
 352:	e8 e9       	ldi	r30, 0x98	; 152
 354:	f5 e0       	ldi	r31, 0x05	; 5
 356:	a8 e4       	ldi	r26, 0x48	; 72
 358:	b4 e0       	ldi	r27, 0x04	; 4
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	28 56       	subi	r18, 0x68	; 104
 360:	3a 4f       	sbci	r19, 0xFA	; 250
		grid[barStart][i] = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	81 93       	st	Z+, r24
 368:	91 93       	st	Z+, r25
		grid[barStop][i] = 1;
 36a:	8d 93       	st	X+, r24
 36c:	9d 93       	st	X+, r25
}
void JeffMode(){
	speed = 1;
	barStart = 7;
	barStop = 5;
	for(int i = 0; i < width; i++){
 36e:	e2 17       	cp	r30, r18
 370:	f3 07       	cpc	r31, r19
 372:	c9 f7       	brne	.-14     	; 0x366 <JeffMode+0x46>
 374:	08 95       	ret

00000376 <ObstacleTick>:
	return 0;
}

int ObstacleTick(int OS_State)
{
	switch(OS_State)
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	21 f4       	brne	.+8      	; 0x382 <ObstacleTick+0xc>
	{
		case init_OS:
		// WELCOME SCREEN
		// choose difficulty
		//ifjoystick set 1,2,3 then move to play_os
		babyMode();
 37a:	7c df       	rcall	.-264    	; 0x274 <babyMode>
		studentMode();
 37c:	a6 df       	rcall	.-180    	; 0x2ca <studentMode>
		JeffMode();
 37e:	d0 df       	rcall	.-96     	; 0x320 <JeffMode>
 380:	08 c0       	rjmp	.+16     	; 0x392 <ObstacleTick+0x1c>
 382:	81 30       	cpi	r24, 0x01	; 1
		break;
		default:
		break;
	}

	switch(OS_State)
 384:	91 05       	cpc	r25, r1
 386:	61 f0       	breq	.+24     	; 0x3a0 <ObstacleTick+0x2a>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	91 05       	cpc	r25, r1
 38c:	11 f1       	breq	.+68     	; 0x3d2 <ObstacleTick+0x5c>
 38e:	89 2b       	or	r24, r25
 390:	d1 f4       	brne	.+52     	; 0x3c6 <ObstacleTick+0x50>
 392:	8e e0       	ldi	r24, 0x0E	; 14
	{
		case init_OS:
		Position1 = 14;
 394:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <Position1>
 398:	80 e2       	ldi	r24, 0x20	; 32
		Position2 = 32;
 39a:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <Position2>
 39e:	19 c0       	rjmp	.+50     	; 0x3d2 <ObstacleTick+0x5c>
		break;
 3a0:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <Position1>

		case play_OS:
		Position1 = Position1 > 1 ? Position1 - 1 : 1;
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <ObstacleTick+0x36>
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <ObstacleTick+0x38>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <Position1>
 3b2:	80 91 c5 20 	lds	r24, 0x20C5	; 0x8020c5 <Position2>
		Position2 = Position2 > 1 ? Position2 - 1 : 1;
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	10 f0       	brcs	.+4      	; 0x3be <ObstacleTick+0x48>
 3ba:	81 50       	subi	r24, 0x01	; 1
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <ObstacleTick+0x4a>
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <Position2>
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <ObstacleTick+0x5c>
		break;
 3c6:	8e e0       	ldi	r24, 0x0E	; 14
		Position1 = Position1;
		Position2 = Position2;
		break;
		
		default:
		Position1 = 14;
 3c8:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <Position1>
 3cc:	80 e2       	ldi	r24, 0x20	; 32
		Position2 = 32;
 3ce:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <Position2>
 3d2:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <OS_next>
		break;
	}

	OS_State = OS_next;
	return OS_State;
}
 3d6:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <OS_next+0x1>
 3da:	08 95       	ret

000003dc <main>:
 3dc:	cf 93       	push	r28
int PlayerTick(int C);
int DisplayTick(int D);


int main()
{
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	28 97       	sbiw	r28, 0x08	; 8
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFC; PORTA = 0x03;
 3f0:	8c ef       	ldi	r24, 0xFC	; 252
 3f2:	81 b9       	out	0x01, r24	; 1
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	84 b9       	out	0x04, r24	; 4
 3fc:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 3fe:	90 ef       	ldi	r25, 0xF0	; 240
 400:	97 b9       	out	0x07, r25	; 7
 402:	9f e0       	ldi	r25, 0x0F	; 15
 404:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 406:	8a b9       	out	0x0a, r24	; 10
 408:	1b b8       	out	0x0b, r1	; 11
	// Period for the tasks

	//Declare an array of tasks
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2,&task3,&task4};
 40a:	88 e0       	ldi	r24, 0x08	; 8
 40c:	ec e8       	ldi	r30, 0x8C	; 140
 40e:	f0 e2       	ldi	r31, 0x20	; 32
 410:	de 01       	movw	r26, r28
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	//There was only one task to do so the size = 1;

	task1.state = 0;
 41c:	e5 eb       	ldi	r30, 0xB5	; 181
 41e:	f0 e2       	ldi	r31, 0x20	; 32
 420:	10 82       	st	Z, r1
	task1.period = 200; //Task Period.
 422:	88 ec       	ldi	r24, 0xC8	; 200
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	a0 e0       	ldi	r26, 0x00	; 0
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	81 83       	std	Z+1, r24	; 0x01
 42c:	92 83       	std	Z+2, r25	; 0x02
 42e:	a3 83       	std	Z+3, r26	; 0x03
 430:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime =task1.period;
 432:	85 83       	std	Z+5, r24	; 0x05
 434:	96 83       	std	Z+6, r25	; 0x06
 436:	a7 83       	std	Z+7, r26	; 0x07
 438:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &ObstacleTick;
 43a:	2b eb       	ldi	r18, 0xBB	; 187
 43c:	31 e0       	ldi	r19, 0x01	; 1
 43e:	32 87       	std	Z+10, r19	; 0x0a
 440:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = 0;
 442:	ea ea       	ldi	r30, 0xAA	; 170
 444:	f0 e2       	ldi	r31, 0x20	; 32
 446:	10 82       	st	Z, r1
	task2.period = 200; //Task Period.
 448:	81 83       	std	Z+1, r24	; 0x01
 44a:	92 83       	std	Z+2, r25	; 0x02
 44c:	a3 83       	std	Z+3, r26	; 0x03
 44e:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime =task2.period;
 450:	85 83       	std	Z+5, r24	; 0x05
 452:	96 83       	std	Z+6, r25	; 0x06
 454:	a7 83       	std	Z+7, r26	; 0x07
 456:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &PlayerTick;
 458:	24 e6       	ldi	r18, 0x64	; 100
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	32 87       	std	Z+10, r19	; 0x0a
 45e:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = 0;
 460:	ef e9       	ldi	r30, 0x9F	; 159
 462:	f0 e2       	ldi	r31, 0x20	; 32
 464:	10 82       	st	Z, r1
	task3.period = 200; //Task Period.
 466:	81 83       	std	Z+1, r24	; 0x01
 468:	92 83       	std	Z+2, r25	; 0x02
 46a:	a3 83       	std	Z+3, r26	; 0x03
 46c:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime =task3.period;
 46e:	85 83       	std	Z+5, r24	; 0x05
 470:	96 83       	std	Z+6, r25	; 0x06
 472:	a7 83       	std	Z+7, r26	; 0x07
 474:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &DisplayTick;
 476:	8e e8       	ldi	r24, 0x8E	; 142
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	92 87       	std	Z+10, r25	; 0x0a
 47c:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(10);
 47e:	6a e0       	ldi	r22, 0x0A	; 10
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	4b de       	rcall	.-874    	; 0x11e <TimerSet>
	TimerOn();
 488:	5b de       	rcall	.-842    	; 0x140 <TimerOn>
	// LCD_init();


	unsigned short i; // Scheduler for-loop iterator
	SPI_Init();
 48a:	51 d0       	rcall	.+162    	; 0x52e <SPI_Init>
	N5110_init();
 48c:	cf de       	rcall	.-610    	; 0x22c <N5110_init>
	N5110_clear();
 48e:	e3 de       	rcall	.-570    	; 0x256 <N5110_clear>
 490:	60 e8       	ldi	r22, 0x80	; 128
	lcd_setXY(0x40,0x80);
 492:	80 e4       	ldi	r24, 0x40	; 64
 494:	d9 de       	rcall	.-590    	; 0x248 <lcd_setXY>
 496:	7e 01       	movw	r14, r28
 498:	89 e0       	ldi	r24, 0x09	; 9
 49a:	e8 0e       	add	r14, r24
 49c:	f1 1c       	adc	r15, r1
 49e:	80 b1       	in	r24, 0x00	; 0
 4a0:	80 95       	com	r24
		N5110_image(copygrid);
		
	}
	return 0;*/
	while(1) {
		PINAtmp = ~PINA & 0x1C;
 4a2:	8c 71       	andi	r24, 0x1C	; 28
 4a4:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <PINAtmp>
 4a8:	de 01       	movw	r26, r28
 4aa:	11 96       	adiw	r26, 0x01	; 1
 4ac:	6d 01       	movw	r12, r26
 4ae:	f6 01       	movw	r30, r12
 4b0:	01 91       	ld	r16, Z+
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 4b2:	11 91       	ld	r17, Z+
 4b4:	6f 01       	movw	r12, r30
 4b6:	d8 01       	movw	r26, r16
 4b8:	15 96       	adiw	r26, 0x05	; 5
 4ba:	4d 91       	ld	r20, X+
 4bc:	5d 91       	ld	r21, X+
 4be:	6d 91       	ld	r22, X+
 4c0:	7c 91       	ld	r23, X
 4c2:	18 97       	sbiw	r26, 0x08	; 8
 4c4:	11 96       	adiw	r26, 0x01	; 1
 4c6:	8d 91       	ld	r24, X+
 4c8:	9d 91       	ld	r25, X+
 4ca:	0d 90       	ld	r0, X+
 4cc:	bc 91       	ld	r27, X
 4ce:	a0 2d       	mov	r26, r0
 4d0:	48 17       	cp	r20, r24
 4d2:	59 07       	cpc	r21, r25
 4d4:	6a 07       	cpc	r22, r26
 4d6:	7b 07       	cpc	r23, r27
 4d8:	80 f0       	brcs	.+32     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4da:	f8 01       	movw	r30, r16
 4dc:	80 81       	ld	r24, Z
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4de:	01 84       	ldd	r0, Z+9	; 0x09
 4e0:	f2 85       	ldd	r31, Z+10	; 0x0a
 4e2:	e0 2d       	mov	r30, r0
 4e4:	08 2e       	mov	r0, r24
 4e6:	00 0c       	add	r0, r0
 4e8:	99 0b       	sbc	r25, r25
 4ea:	09 95       	icall
 4ec:	d8 01       	movw	r26, r16
 4ee:	8c 93       	st	X, r24
 4f0:	f8 01       	movw	r30, r16
 4f2:	15 82       	std	Z+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 4f4:	16 82       	std	Z+6, r1	; 0x06
 4f6:	17 82       	std	Z+7, r1	; 0x07
 4f8:	10 86       	std	Z+8, r1	; 0x08
 4fa:	f8 01       	movw	r30, r16
 4fc:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 4fe:	96 81       	ldd	r25, Z+6	; 0x06
 500:	a7 81       	ldd	r26, Z+7	; 0x07
 502:	b0 85       	ldd	r27, Z+8	; 0x08
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	a1 1d       	adc	r26, r1
 508:	b1 1d       	adc	r27, r1
 50a:	85 83       	std	Z+5, r24	; 0x05
 50c:	96 83       	std	Z+6, r25	; 0x06
 50e:	a7 83       	std	Z+7, r26	; 0x07
 510:	b0 87       	std	Z+8, r27	; 0x08
 512:	ce 14       	cp	r12, r14
 514:	df 04       	cpc	r13, r15
		
	}
	return 0;*/
	while(1) {
		PINAtmp = ~PINA & 0x1C;
		for ( i = 0; i < numTasks; i++ ) {
 516:	59 f6       	brne	.-106    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 518:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <TimerFlag>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 51c:	88 23       	and	r24, r24
 51e:	e1 f3       	breq	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 520:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <TimerFlag>
		TimerFlag = 0;
 524:	bc cf       	rjmp	.-136    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>

00000526 <SPI_SS_Enable>:
 526:	2c 98       	cbi	0x05, 4	; 5
	}
 528:	08 95       	ret

0000052a <SPI_SS_Disable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
 52a:	2c 9a       	sbi	0x05, 4	; 5
 52c:	08 95       	ret

0000052e <SPI_Init>:
 52e:	83 eb       	ldi	r24, 0xB3	; 179
 530:	84 b9       	out	0x04, r24	; 4
 532:	28 9a       	sbi	0x05, 0	; 5
 534:	26 98       	cbi	0x04, 6	; 4
 536:	2c 9a       	sbi	0x05, 4	; 5
 538:	81 e5       	ldi	r24, 0x51	; 81
 53a:	8c bd       	out	0x2c, r24	; 44
 53c:	08 95       	ret

0000053e <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 53e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 540:	0d b4       	in	r0, 0x2d	; 45
 542:	07 fe       	sbrs	r0, 7
 544:	fd cf       	rjmp	.-6      	; 0x540 <SPI_Write+0x2>
}
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
